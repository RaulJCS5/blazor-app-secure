@page "/auth/login"

@attribute [AllowAnonymous]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using BlazorAppSecure.Data
@using BlazorAppSecure.Database
@using BlazorAppSecure.ViewModel
@using Microsoft.AspNetCore.Authentication
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager Navigation
@inject ILogger<LoginForm> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Username" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="username" class="form-label">Username</label>
                    <ValidationMessage For="() => Input.Username" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginViewModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext != null)
        {
            if (HttpMethods.IsGet(HttpContext.Request.Method))
            {
                // Clear the existing external cookie to ensure a clean login process
                await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            }
        }
    }
    private async Task LoginUser()
    {
        try
        {
            var user = await UserManager.FindByNameAsync(Input.Username);
            if (user == null)
            {
                errorMessage = "User not found.";
                return;
            }


            if (await SignInManager.CanSignInAsync(user))
            {
                var result = await SignInManager.CheckPasswordSignInAsync(user, Input.Password, lockoutOnFailure: false);
                if (result == Microsoft.AspNetCore.Identity.SignInResult.Success)
                {
                    Guid key = Guid.NewGuid();
                    BlazorCookieLoginMiddleware.Logins[key] = new LoginInfo { Username = user.UserName, Password = Input.Password };
                    Navigation.NavigateTo($"/login?key={key}", true);
                }
                else if (result.IsLockedOut)
                {
                    Logger.LogWarning("User account locked out.");
                    errorMessage = "User account locked out.";
                }
                else
                {
                    Logger.LogWarning("Incorrect password.");
                    errorMessage = "Incorrect password.";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred during login.");
            errorMessage = "An error occurred. Please try again.";
        }
    }
}
